framework
       - reuse pre-written code(template)

Spring
      - powerful & lightweight application development framework
      - java based application framework
      - Spring 5
      - a framework of frameworks because it supports various framework like struts,hibernate,EJB & JSF
      - provides Spring Security,Spring Boot,Spring MVC,Spring Cloud,Spring Data

  Features:
  1. Lightweight
  2. Inversion of Control(IoC)
           - loosely coupling
  3. Aspect Oriented Programming(AOP)
           - by separating the application business logic from system service
  4. Container
           - creates & manages life cycle & configuration of application objects
  5. MVC Framework
           - configurable via interface & accomodates multiple view technologies
  6. Transaction Management
           - provides a generic abstraction layer

 Why we used Spring?
 1. works on POJO(Plain Old Java Object)
                - by using this our application will be lightweight
 2. predefined templates for JDBC,Hibernate,JPA
 3. Because of Dependency Injection(DI),our code becomes loosely coupled
 4. development becomes faster
 5. supports for transaction,validation,caching

 Spring Framework Architecture
 1. Test
      - layer provides support of testing with Junit & TestNG
 2. Core Container
      - contains core,beans,context & SpEl
      a) core & beans
              - provides IoC & DI features
      b) Context
              - supports internationalization(118N),EJB,JMS,Basic Remoting
      c) SpEL(Expression Language)
              - provide support to setting & getting property values,methods invocation,accessing the collections,
              logical & arithmetic operators,retrieval of objects by name.
 3. AOP
      - use Advices,Pointcuts to decouple the code
 4. Aspect
      - support to integration with AspectJ
 5. Instrumentation
      - support to class instrumentation
 6. Messaging
 7. Data Access/Integration
       - contains JDBC,ORM,OXM,JMS & Transaction
       - provides support to interact with database
 8. Web
       - contains Websocket,Web,Servlet & Portlet
       - provides support to create a web application

 IoC container
       - core of spring framework
       - creates the objects,configures & assembles their dependencies,
         manages entire life cycle of objects
       - uses DI to manage the components that make up the application
       - controlling of objects & their life cycle
       Types:
              1. Bean Factory
                       - The root interface for accessing a Spring bean container
              2. Application Context
                       - represents the IoC container
                       - spring container is responsible for instantiating,configuring & assembling objects(Beans)
                       - Central interface to provide configuration for an application

       Configure IoC Container
       1. XML based
       2. Annotation based
       3. Java based

 Bean:
      - an object in Spring
      - managed by IoC

 Spring Bean Scopes:
      1. Singleton(default) - single bean instance per IoC
      2. Prototype - new bean instance is created every time
         a bean requested
      3. Request - a bean instance is created to an HTTP request
      4. Session - a bean instance is created to an HTTP session
      5. global-session - global to HTTP session

Dependency Injection (DI):
       - Design pattern that implements IoC
       - main functionality provided by IoC
       - responsible for injecting dependencies through either
         constructor or setter method
       - connecting the objects with other objects or injecting objects
         into other objects
         Ways  1. Constructor Dependency Injection (CDI)
               2. Setter Dependency Injection  (SDI)

     pom.xml
       - contains information about the project & configuration details
         used by maven to build the project
       - when executing the task,maven looks for the pom file in current directory
       - maven reads the POM,gets the needed configuration details,then executes the task.

       Spring Boot
     - advanced concept of Spring framework
     - extension of spring framework
     - it is built on the top of the spring framework
     - create a standalone Spring-Based application
     -provides RAD(Rapid Application Development) feature
     - Restful

     Features:
     1. Spring Boot Starters
     2. AutoConfiguration
     3. Actuator
     4. Embedded Servlet

How Spring Boot application works internally?
   - starts using main method
   - main method calls the run method(static)
   - application context searches for the classes annotated with @Configuration
   & initializes all the declared beans in those configuration classes
   - based on scope of those beans,stores those beans in JVM specifically in IoC container
   - after creation of all beans,automatically configures dispatch servlet
   - register the default handler mappings

   spring-boot-starter-web
         - for building web application using Spring MVC
         - uses the tomcat as the default embedded container

   spring-boot-devtools
         - for live reload or automatic reload of application

   spring-boot-starter-jdbc
         - for communicating with the database

   lombok
        - a java library that will reduce the boilerplate code that
          we usually write inside the entity class like setters,getters & tostring()

   mysql-connector-java
        - store the data into the database

   application.properties
        - configures the application
        - file allows to run an application in different environment







